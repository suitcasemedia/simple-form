 // Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
      @media (min-width: $min) {
        @content;
      }
    } @else {
      @content;
    }
  }


// Define the maximum width of `.contact-form-container` for different screen sizes.

$contact-form-container-max-widths: (
    sm: 540px,
    md: 600px,
    lg: 700px,
    xl: 1000px
  ) !default;

  @mixin make-contact-form-container($gutters: $grid-gutter-widths) {
    position: relative;
    margin-left: auto;
    margin-right: auto;
  
    @each $breakpoint in map-keys($gutters) {
      @include media-breakpoint-up($breakpoint) {
        $gutter: map-get($gutters, $breakpoint);
        padding: ($gutter / 5);
       
      }
    }
  }
  
// For each breakpoint, define the maximum width of the container in a media query
@mixin make-contact-form-container-max-widths($max-widths: $contact-form-container-max-widths, $breakpoints: $grid-breakpoints) {
    @each $breakpoint, $contact-form-container-max-width in $max-widths {
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        width: $contact-form-container-max-width;
        max-width: 100%;
      }
    }
  }

  .contact-form-page{
      background-color: #fff;
      border-radius: 15px;
      -webkit-box-shadow: 0px 0px 29px 0px rgba(0,0,0,0.75);
      -moz-box-shadow: 0px 0px 29px 0px rgba(0,0,0,0.75);
      box-shadow: 0px 0px 29px 0px rgba(0,0,0,0.75);
     
   
        @include make-contact-form-container();
        @include make-contact-form-container-max-widths();

        &--step{
            background: $yellow;
            background: -webkit-linear-gradient($yellow,$gold); /* For Safari 5.1 to 6.0 */
            background: -o-linear-gradient($yellow,$gold); /* For Opera 11.1 to 12.0 */
            background: -moz-linear-gradient($yellow,$gold); /* For Firefox 3.6 to 15 */
            background: linear-gradient($yellow,$gold); /* Standard syntax */
            color: #fff;
            text-shadow: 1px 1px #444;
            border-radius: 15px;
        }

        &--section{
            background: #dedede;
            border-radius: 15px;
            height: auto;
            transition: height 500ms; 
        }
        &--container{    
        }
        &--inner-section{
        
          -webkit-animation: fade-in 1s ; /* Safari 4+ */
          -moz-animation:    fade-in 1s ; /* Fx 5+ */
          -o-animation:      fade-in 1s ; /* Opera 12+ */
          animation:        fade-in 1s ; /* IE 10+, Fx 29+ */
        }
        button{
          background: -webkit-linear-gradient(#474eaf,#7162ca); /* For Safari 5.1 to 6.0 */
          background: -o-linear-gradient(#474eaf,#7162ca); /* For Opera 11.1 to 12.0 */
          background: -moz-linear-gradient(#474eaf,#7162ca); /* For Firefox 3.6 to 15 */
          background: linear-gradient(#474eaf,#7162ca); /* Standard syntax */
          border-radius: 10px;
          
          &:hover{
            opacity: 0.9;
          }
        }
     
 }


 @-webkit-keyframes fade-in {
  0%   { opacity: 0; }
  100% { opacity: 1; }
}
@-moz-keyframes fade-in {
  0%   { opacity: 0; }
  100% { opacity: 1; }
}
@keyframes fade-in {
  0%   { opacity: 0; }
  100% { opacity: 1; }
}
@keyframes fade-in{
  0%   { opacity: 0; }
  100% { opacity: 1; }
}